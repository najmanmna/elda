/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Subscribers = {
  _id: string;
  _type: "subscribers";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  email?: string;
  createdAt?: string;
};

export type Banner = {
  _id: string;
  _type: "banner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  showOn?: "desktop" | "mobile" | "both";
  desktop?: {
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    buttonTheme?: "light" | "dark";
  };
  mobile?: {
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    buttonTheme?: "light" | "dark";
  };
};

export type OrderItem = {
  _type: "orderItem";
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  variant?: {
    color?: string;
    variantKey?: string;
  };
  quantity?: number;
  price?: number;
  productName?: string;
  productImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
  orderDate?: string;
  customerName?: string;
  phone?: string;
  email?: string;
  address?: {
    district?: string;
    city?: string;
    line1?: string;
    notes?: string;
  };
  paymentMethod?: "COD" | "BANK";
  items?: Array<{
    _key: string;
  } & OrderItem>;
  subtotal?: number;
  shippingCost?: number;
  total?: number;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  subcategory?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  variants?: Array<{
    variantName?: string;
    openingStock?: number;
    stockOut?: number;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    _type: "variant";
    _key: string;
  }>;
  price?: number;
  discount?: number;
  material?: string;
  width?: number;
  useCases?: string;
  isFeatured?: boolean;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  parent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  deliveryCharges?: {
    colombo?: number;
    suburbs?: number;
    others?: number;
  };
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Page | Subscribers | Banner | OrderItem | Order | Product | Category | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Settings;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/query.ts
// Variable: FEATURED_CATEGORY_QUERY
// Query: *[_type == "category" && defined(featured) && featured == true] | order(name asc){    _id,    name,    slug,    parent->{      name    }  }
export type FEATURED_CATEGORY_QUERYResult = Array<never>;
// Variable: ALL_PRODUCTS_QUERY
// Query: *[_type == "product"] | order(name asc){    _id,    name,    slug,    price,    discount,    isFeatured,    "category": category->{      _id,      name,      slug    },    "subcategory": subcategory->{      _id,      name,      slug    },    variants[]{      _key,      variantName,      openingStock,      stockOut,      "availableStock": openingStock - coalesce(stockOut, 0),      images[]{asset->{url}}    }  }
export type ALL_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  isFeatured: boolean | null;
  category: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  subcategory: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  variants: Array<{
    _key: string;
    variantName: string | null;
    openingStock: number | null;
    stockOut: number | null;
    availableStock: number | null;
    images: Array<{
      asset: {
        url: string | null;
      } | null;
    }> | null;
  }> | null;
}>;
// Variable: FEATURE_PRODUCTS
// Query: *[_type == "product" && isFeatured == true] | order(name asc){    _id,    name,    slug,    price,    discount,    "category": category->{      name,      slug    },    "subcategory": subcategory->{      name,      slug    },    variants[]{      _key,      variantName,      openingStock,      stockOut,      "availableStock": openingStock - coalesce(stockOut, 0),      images[]{asset->{url}}    }  }
export type FEATURE_PRODUCTSResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  subcategory: {
    name: string | null;
    slug: Slug | null;
  } | null;
  variants: Array<{
    _key: string;
    variantName: string | null;
    openingStock: number | null;
    stockOut: number | null;
    availableStock: number | null;
    images: Array<{
      asset: {
        url: string | null;
      } | null;
    }> | null;
  }> | null;
}>;
// Variable: NEW_PRODUCTS_QUERY
// Query: *[_type == "product"] | order(_createdAt desc)[0...8]{    _id,    name,    slug,    price,    discount,    "category": category->{      name,      slug    },    "subcategory": subcategory->{      name,      slug    },    variants[]{      variantName,      openingStock,      stockOut,      "availableStock": openingStock - coalesce(stockOut, 0),      images[]{asset->{url}}    }  }
export type NEW_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  subcategory: {
    name: string | null;
    slug: Slug | null;
  } | null;
  variants: Array<{
    variantName: string | null;
    openingStock: number | null;
    stockOut: number | null;
    availableStock: number | null;
    images: Array<{
      asset: {
        url: string | null;
      } | null;
    }> | null;
  }> | null;
}>;
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == "product" && slug.current == $slug][0]{    _id,    name,    slug,    price,    discount,    isFeatured,    material,    width,    useCases,    description,    "category": category->{      _id,      name,      slug    },    "subcategory": subcategory->{      _id,      name,      slug    },    variants[]{      _key,      variantName,      openingStock,      stockOut,      "availableStock": openingStock - coalesce(stockOut, 0),      images[]{asset->{url}}    }  }
export type PRODUCT_BY_SLUG_QUERYResult = {
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  isFeatured: boolean | null;
  material: string | null;
  width: number | null;
  useCases: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  category: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  subcategory: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  variants: Array<{
    _key: string;
    variantName: string | null;
    openingStock: number | null;
    stockOut: number | null;
    availableStock: number | null;
    images: Array<{
      asset: {
        url: string | null;
      } | null;
    }> | null;
  }> | null;
} | null;
// Variable: ADDRESS_QUERY
// Query: *[_type == "address"] | order(publishedAt desc)
export type ADDRESS_QUERYResult = Array<never>;
// Variable: ALLCATEGORIES_QUERY
// Query: *[_type == "category"] | order(name asc){    _id,    name,    slug,    parent->{      _id,      name,      slug    }  }
export type ALLCATEGORIES_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  parent: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"category\" && defined(featured) && featured == true] | order(name asc){\n    _id,\n    name,\n    slug,\n    parent->{\n      name\n    }\n  }\n": FEATURED_CATEGORY_QUERYResult;
    "\n  *[_type == \"product\"] | order(name asc){\n    _id,\n    name,\n    slug,\n    price,\n    discount,\n    isFeatured,\n    \"category\": category->{\n      _id,\n      name,\n      slug\n    },\n    \"subcategory\": subcategory->{\n      _id,\n      name,\n      slug\n    },\n    variants[]{\n      _key,\n      variantName,\n      openingStock,\n      stockOut,\n      \"availableStock\": openingStock - coalesce(stockOut, 0),\n      images[]{asset->{url}}\n    }\n  }\n": ALL_PRODUCTS_QUERYResult;
    "\n  *[_type == \"product\" && isFeatured == true] | order(name asc){\n    _id,\n    name,\n    slug,\n    price,\n    discount,\n    \"category\": category->{\n      name,\n      slug\n    },\n    \"subcategory\": subcategory->{\n      name,\n      slug\n    },\n    variants[]{\n      _key,\n      variantName,\n      openingStock,\n      stockOut,\n      \"availableStock\": openingStock - coalesce(stockOut, 0),\n      images[]{asset->{url}}\n    }\n  }\n": FEATURE_PRODUCTSResult;
    "\n  *[_type == \"product\"] | order(_createdAt desc)[0...8]{\n    _id,\n    name,\n    slug,\n    price,\n    discount,\n    \"category\": category->{\n      name,\n      slug\n    },\n    \"subcategory\": subcategory->{\n      name,\n      slug\n    },\n    variants[]{\n      variantName,\n      openingStock,\n      stockOut,\n      \"availableStock\": openingStock - coalesce(stockOut, 0),\n      images[]{asset->{url}}\n    }\n  }\n": NEW_PRODUCTS_QUERYResult;
    "\n  *[_type == \"product\" && slug.current == $slug][0]{\n    _id,\n    name,\n    slug,\n    price,\n    discount,\n    isFeatured,\n    material,\n    width,\n    useCases,\n    description,\n    \"category\": category->{\n      _id,\n      name,\n      slug\n    },\n    \"subcategory\": subcategory->{\n      _id,\n      name,\n      slug\n    },\n    variants[]{\n      _key,\n      variantName,\n      openingStock,\n      stockOut,\n      \"availableStock\": openingStock - coalesce(stockOut, 0),\n      images[]{asset->{url}}\n    }\n  }\n": PRODUCT_BY_SLUG_QUERYResult;
    "\n  *[_type == \"address\"] | order(publishedAt desc)\n": ADDRESS_QUERYResult;
    "\n  *[_type == \"category\"] | order(name asc){\n    _id,\n    name,\n    slug,\n    parent->{\n      _id,\n      name,\n      slug\n    }\n  }\n": ALLCATEGORIES_QUERYResult;
  }
}
